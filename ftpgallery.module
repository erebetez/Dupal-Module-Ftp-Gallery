<?php

/**
 * Implementation of hook_help().
 */
function ftpgallery_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ftpgallery':
      $output = '<p>' . t("Hello Help.") . '</p>';
 
      return $output;
  }
}

/**
* Implementation of hook_node_info().
*/
function ftpgallery_node_info() {
  return array(
    'ftpgallery' => array(
      'name' => t('FTP-Gallery'),
      'module' => 'ftpgallery',
      'description' => "Creates a Gallery out of a folder.",
    )
  );
} 

/**
* Implementation of hook_perm().
*/
function ftpgallery_perm() {
  return array('create ftpgallery', 'edit own ftpgallery');
} 

/**
* Implementation of hook_access().
*/
function ftpgallery_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create ftpgallery', $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own ftpgallery', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}


/**
* Implementation of hook_form().
*/
function ftpgallery_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield', 
      '#title' => check_plain($type->title_label), 
      '#required' => TRUE, 
      '#default_value' => $node->title, 
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  // Now we define the form elements specific to our node type.
  $form['galleryurl'] = array(
    '#type' => 'textfield', 
    '#title' => t('Path to Folder'), 
    '#required' => TRUE,
    '#default_value' => isset($node->galleryurl) ? $node->galleryurl : '',
  );

  return $form;
}

// validate path
function ftpgallery_validate($node, &$form_state) {
  if (!_ftpgallery_galleryPathExist($node)) {
    form_set_error('galleryurl', t('The path for the gallery does not exist. Please use a valid path.'));
  }
}

function _ftpgallery_galleryPathExist($node) {
  return file_exists( getcwd() . "/" . $node->galleryurl );
}

// --- Database hooks ---

function ftpgallery_insert($node) {
  db_query("INSERT INTO {ftpgallery} (vid, nid, galleryurl) VALUES (%d, %d, '%s')", $node->vid, $node->nid, $node->galleryurl);
}

function ftpgallery_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    ftpgallery_insert($node);
  }
  else {
    db_query("UPDATE {ftpgallery} SET galleryurl = '%s' WHERE vid = %d", $node->galleryurl, $node->vid);
  }
}

function ftpgallery_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {ftpgallery} WHERE nid = %d', $node->nid);
}

// Revisions in the ftpgallery table
function ftpgallery_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {ftpgallery} WHERE vid = %d', $node->vid);
      break;
  }
}


// --- Load and Display ---

function ftpgallery_load($node) {
  return db_fetch_object(db_query('SELECT galleryurl FROM {ftpgallery} WHERE vid = %d', $node->vid));
}


function ftpgallery_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node = _ftpgallery_parseGalleryFolder($node);

  if( !empty($node->error) ){
    $node->content['error'] = array(
      '#value' => theme('ftpgallery_error', $node->error),
      '#weight' => 1,
    );
  }

  $node->content['gallery'] = array(
    '#value' => theme('ftpgallery_gallery', $node),
    '#weight' => 2,
  );

  return $node;
}

function _ftpgallery_parseGalleryFolder($node) {
  $node->gallery = array();
  $thumbnails = array();
  $pictures = array();

  if( !_ftpgallery_galleryPathExist($node) ){
     return _ftpgallery_formatError($node, t('Gallery path does not exist.'));
  }

  // get files in the gallery folder
  $fileArray = scandir($node->galleryurl);

  foreach($fileArray as $file) {
    if( _ftpgallery_isValidFileType($file) ) {
      if( _ftpgallery_isThunbnail($file) ) {
        array_push($thumbnails, $file);
      } else {
        array_push($pictures, $file);
      }
    }
  }

  if( count($thumbnails) != count($pictures) ){
     $node = _ftpgallery_formatError($node, t('Not equal number of thumbnails and pictures.'));
  }

  $node->gallery['thumbnails'] = $thumbnails;
  $node->gallery['pictures'] = $pictures;
  return $node;
}

function _ftpgallery_isValidFileType($file){
  // TODO make a settingspage
  $allowedFileTypes = Array('jpg', 'jpeg', 'png');

  $fileNameEnding = end(explode(".", $file));

  foreach($allowedFileTypes as $ending){
    if( $fileNameEnding == $ending ) {
      return true;
    }
  }
  return false;
}

function _ftpgallery_isThunbnail($file){
  // TODO make a settingspage
  $thumbnailPrefix = "thumb";

  $filePrefix = reset(explode("_", $file));

  return ( $filePrefix == $thumbnailPrefix );
}

function theme_ftpgallery_gallery($node) {
// <a href="http://www.jugendundnaturoberwallis.ch/files/gallery/2011_skiiwiekend/img_1733_jpeg.jpeg" rel="lightbox[2011_skiiwiekend]"><img class="photo" src="http://www.jugendundnaturoberwallis.ch/files/gallery/2011_skiiwiekend/thumb_img_1733_jpeg.jpeg" width="120" height="120"></a>

  $output = '<div class="ftpgallery_gallery">';

  // we only display pictures with a thumbnail.
  for ($i = 0; $i < count($node->gallery['thumbnails']); $i++) {
    $output .= '<a href="';
    $output .= $node->galleryurl . "/" . $node->gallery['pictures'][$i];
    $output .= '" rel="lightbox[';
    $output .= $node->nid;
//     $output .= ']"><img class="thumbnail" " src="';
    $output .= ']"><img style="margin: 0 5px 5px 0;" " src="';
    $output .= $node->galleryurl . "/" . $node->gallery['thumbnails'][$i];
    $output .= '" width="120" height="120"></a>';
  }

 // TODO remove Debug stuff.
  $output .= "<br>";

  foreach($node->gallery['thumbnails'] as $thumbnail){
     $output .= $node->galleryurl . "/" . $thumbnail . "<br>";
  }

  foreach($node->gallery['pictures'] as $picture){
     $output .= $node->galleryurl . "/" . $picture . "<br>";
  }

  $output .= '</div>';
  return $output;
}

// error handling
function _ftpgallery_formatError($node, $errorText){
  $node->error .= $errorText . "<br>";
  return $node;
}

function theme_ftpgallery_error($text) {
  $output = '<div class="ftpgallery_error">';
  $output .= t('Error: %text', array('%text' => check_plain($text)));
  $output .= '</div>';
  return $output;
}

// Tell Drupal about the theme functions
function ftpgallery_theme() {
  return array(
    'ftpgallery_error' => array(
      'arguments' => array('text'),
    ),
    'ftpgallery_gallery' => array(
      'arguments' => array('node'),
    ),
  );
}
