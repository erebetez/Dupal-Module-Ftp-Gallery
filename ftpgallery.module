<?php

require_once ( dirname(__FILE__) . '/ftpgallery.database.inc');
require_once ( dirname(__FILE__) . '/ftpgallery.errorhandling.inc');

function ftpgallery_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ftpgallery':
      $output = '<p>' . t("Hello Help.") . '</p>';
 
      return $output;
  }
}

function ftpgallery_node_info() {
  return array(
    'ftpgallery' => array(
      'name' => t('FTP-Gallery'),
      'module' => 'ftpgallery',
      'description' => "Creates a Gallery out of a folder.",
    )
  );
} 

function ftpgallery_init() {
  drupal_add_css(drupal_get_path('module', 'ftpgallery') .'/ftpgallery.css');
}

function ftpgallery_perm() {
  return array(
    'create ftpgallery',
    'edit own ftpgallery',
    'access administration pages'
  );
}

function ftpgallery_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create ftpgallery', $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own ftpgallery', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}

function ftpgallery_menu() {
  $items = array();

  $items['admin/settings/ftpgallery'] = array(
    'title' => t('FTP Gallery module settings'),
    'description' => t('Settings for the FTP Gallery module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ftpgallery_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ftpgallery.admin.inc',
   );

  return $items;
}

function ftpgallery_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {ftpgallery} WHERE vid = %d', $node->vid);
      break;

    case 'presave':
      //get the folder name since the select form returns the id an not the value of the selected field.
      $folderList = _ftpgallery_readFolders( variable_get('ftpgallery_gallerybasedir', 'files') );
      $node->galleryurl = $folderList[$node->galleryId];
      break;
  }
}

function _ftpgallery_readFolders($scanPath){
  $fileNameList = scandir( $scanPath );
  $folderList = array();
  foreach( $fileNameList as $file ){
    if( !is_dir($file) ){
      array_push($folderList, $file);
    }
  }
  return $folderList;
}


// --- The Form ---
function ftpgallery_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield', 
      '#title' => check_plain($type->title_label), 
      '#required' => TRUE, 
      '#default_value' => $node->title, 
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['galleryId'] = array(
    '#type' => 'select',
    '#title' => t('Path to Folder'),
    '#description' => t('Choose path where the gallery is located on the server.'),
    '#required' => TRUE,
    '#default_value' => 0, //isset($node->galleryId) ? $node->galleryId : 0
    '#options' => _ftpgallery_readFolders( variable_get('ftpgallery_gallerybasedir', 'files') ),
    '#weight' => 0,
  );

  $form['thumbid'] = array(
    '#type' => 'textfield',
    '#title' => t('Thumbnail prefix or Path'),
    '#required' => TRUE,
    '#default_value' => isset($node->thumbid) ? $node->thumbid : 'thumb_',
    '#weight' => 1,
  );

  return $form;
}

function _ftpgallery_galleryPathExists($node, $file = ''){
  if( empty($node->galleryurl) ){
    return false;
  }
  return file_exists( getcwd() . "/" . _ftpgallery_galleryPath($node) . $file );
}

function _ftpgallery_galleryPath($node){
  $baseDir = variable_get('ftpgallery_gallerybasedir', 'files');
  return $baseDir . "/" . $node->galleryurl . "/";
}

// --- Display ---
function ftpgallery_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node = _ftpgallery_getGalleryPictures($node);

  $node->content['gallery'] = array(
    '#value' => theme('ftpgallery_gallery', $node),
    '#weight' => 1,
  );

  $errors = drupal_get_messages( 'error', FALSE);
  if( !empty($errors) && $page ){
    $node->content['debug'] = array(
      '#value' => theme('ftpgallery_debug', $node),
      '#weight' => 2,
    );
  }

  return $node;
}

function _ftpgallery_getGalleryPictures($node){
  if( !_ftpgallery_galleryPathExists($node) ){
     drupal_set_message(t('Gallery path does not exist.'), 'error');
     return $node;
  }

  $node = _ftpgallery_parseGalleryFolder($node);

  if( count($node->gallery['thumbnails']) != count($node->gallery['pictures']) ){
    drupal_set_message(t('Not equal number of thumbnails and pictures.'), 'warning');
  }

  if( count($node->gallery['thumbnails']) == 0 ){
    drupal_set_message(t('No matching thumbnails in the Folder.'), 'error');
  }

  return $node;
}

function _ftpgallery_parseGalleryFolder($node) {
  $thumbnails = array();
  $pictures = array();

  // get files in the gallery folder
  $fileNameArray = scandir( _ftpgallery_galleryPath($node) );

  $isThumbnailFolder = _ftpgallery_isThumbnailPrefixAFolder($node, $fileNameArray);

  // remove thumbnails or folders from the List
  $fileNameArray = preg_grep("/^" . $node->thumbid ."/", $fileNameArray, PREG_GREP_INVERT);

  foreach($fileNameArray as $fileName) {
    if( !_ftpgallery_isValidFileType($fileName) ) {
      continue;
    }

    $thumbnail = _ftpgallery_getThumbnail($fileName, $node->thumbid, $isThumbnailFolder);

    if( _ftpgallery_galleryPathExists( $node, $thumbnail ) ){
      array_push($pictures, $fileName);
      array_push($thumbnails, $thumbnail);
      continue;
    }
    drupal_set_message(t("No matching thumbnail for picture %file and thumbnail %thumb ",
                         array('%file' => check_plain($fileName)),
                         array('%thumb' => check_plain($thumbnail)),
                         'warning' ));
  }

  $node->gallery = array();
  $node->gallery['thumbnails'] = $thumbnails;
  $node->gallery['pictures'] = $pictures;
  return $node;
}

function _ftpgallery_isThumbnailPrefixAFolder($node, $filePathArray){
   $thumbnailPrefix = "/^" . $node->thumbid . "$/";
   return (count(preg_grep($thumbnailPrefix, $filePathArray)) > 0);
}

function _ftpgallery_isValidFileType($fileName){
  $allowedFileTypes = variable_get('ftpgallery_allowedfiletypes', 'jpg jpeg png');
  $allowedFileTypes = explode(" ", $allowedFileTypes);

  $fileNameEnding = strtolower(end(explode(".", $fileName)));

  foreach($allowedFileTypes as $ending){
    if( $fileNameEnding == $ending ) {
      return true;
    }
  }
  return false;
}

function _ftpgallery_getThumbnail($fileName, $thumbnailPrefix, $isFolder = FALSE){
  if( $isFolder ){
    return $thumbnailPrefix . "/" . $fileName;
  }

  return $thumbnailPrefix . $fileName;
}

function theme_ftpgallery_gallery($node) {
  $output = '<div class="ftpgallery_gallery">';
  $galleryPath = _ftpgallery_galleryPath($node);

  // we only display pictures with a thumbnail.
  for ($i = 0; $i < count($node->gallery['thumbnails']); $i++) {
    $output .= theme_ftpgallery_formatLightboxImage(
      $galleryPath . $node->gallery['pictures'][$i],
      $galleryPath . $node->gallery['thumbnails'][$i],
      $node->nid,
      $node->gallery['thumbnails'][$i]
    );
  }
  $output .= '</div>';
  return $output;
}

function theme_ftpgallery_formatLightboxImage($pictureUrl, $thumbnailUrl, $lightboxGroup, $alt='', $title='' , $attributes = NULL){
    $output .= '<a href="' . $pictureUrl . '" ';

    $output .= 'rel="lightbox[';
    $output .= $lightboxGroup;
    $output .= ']"> ';

    $attributes['class'] = 'lightboxThumbnail';

    $output .=  theme('image', $thumbnailUrl, $alt, $title, $attributes, FALSE);

    $output .= '</a>';
    return $output;
}

// Tell Drupal about the theme functions
function ftpgallery_theme() {
  return array(
    'ftpgallery_debug' => array(
      'arguments' => array('node'),
    ),
    'ftpgallery_gallery' => array(
      'arguments' => array('node'),
    ),
    'ftpgallery_formatLightboxImage' => array(
      'arguments' => array('pictureUrl', 'thumbnailUrl', 'lightboxGroup', 'alt', 'title' , 'attributes'),
    ),
  );
}
