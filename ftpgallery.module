<?php
/***********************************************************************************
* Drupal Module: FTP-Gallery
* Copyright (C) 2011 Etienne Rebetez, etienne.rebetez@oberwallis.ch
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*
***********************************************************************************/

require_once ( dirname(__FILE__) . '/ftpgallery.database.inc');
require_once ( dirname(__FILE__) . '/ftpgallery.parser.inc');

function ftpgallery_node_info() {
  return array(
    'ftpgallery' => array(
      'name' => t('FTP-Gallery'),
      'module' => 'ftpgallery',
      'description' => t("Creates a gallery out of a folder that is located on the server."),
    )
  );
} 

function ftpgallery_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ftpgallery':
      $output .= '<p>' . t("This module parses a folder from the server an shows the pictures as a gallery in the node. ");
      $output .= t("A new content type, FTP-Gallery, is provided to setup a new node."). '</p>';
      $output .= '<h2>' . t("Thumbnails") . '</h2>';
      $output .= '<p>' . t("The thumbnails must also be located in the folder with a prefix or in a subfolder. ");
      $output .= t("Pictures and thumbnails have to have the same filename."). '</p>';
      $output .= '<h2>' . t("Settings") . '</h2>';
      $output .= '<p>' . t("Allowed file types: All filetypes that do not match the suffix configured in this settns are filterd out. ") . '</p>';
      $output .= '<p>' . t("The base directory is there where all gallerys should be located. The folders in this directory are shown in the form when a new FTP-Gallery is created.") . '</p>';

      return $output;
  }
}

function ftpgallery_init() {
  // Add the Stylesheet
  drupal_add_css(drupal_get_path('module', 'ftpgallery') .'/ftpgallery.css');
  // Add some javascirpt code.
  drupal_add_js(drupal_get_path('module', 'ftpgallery') .'/ftpgallery.js');
}

function ftpgallery_perm() {
  return array(
    'create ftpgallery',
    'edit own ftpgallery',
    'access administration pages'
  );
}

function ftpgallery_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create ftpgallery', $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own ftpgallery', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}

function ftpgallery_menu() {
  $items = array();

  // The menu entry for the admin page
  $items['admin/settings/ftpgallery'] = array(
    'title' => t('FTP Gallery module settings'),
    'description' => t('Settings for the FTP Gallery module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ftpgallery_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ftpgallery.admin.inc',
   );

  // callback for the dynamic ahah form
  $items['ftpgallery/ahah/callback'] = array(
    'page callback' => 'ftpgallery_callback',
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/// callback function is triggered with the ftpgallery/ahah/callback path.
function ftpgallery_callback($path){
  $baseDir = variable_get('ftpgallery_gallerybasedir', 'files');

  // check if the given path realy exists. The path could be manualy typed in the browser.
  if( file_exists( getcwd() . "/" . $baseDir . "/" . $path) ){
    $output = _ftpgallery_galleryContentPreviewBilder($path);
  }

  print $output;
}

/// scanns the given folder and return a html list. Only used to return ajax query.
function _ftpgallery_galleryContentPreviewBilder($path){

  $folderContent = scandir( variable_get('ftpgallery_gallerybasedir', 'files') . '/' . $path );

  foreach($folderContent as $content){
    $output .= $content . '<br />';
  }

  return $output;
}

// --- The Form ---
function ftpgallery_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield', 
      '#title' => check_plain($type->title_label), 
      '#required' => TRUE, 
      '#default_value' => $node->title, 
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['galleryurl'] = array(
    '#type' => 'select',
    '#title' => t('Path to Folder'),
    '#description' => t('Choose path where the gallery is located on the server.'),
    '#required' => TRUE,
    '#options' => drupal_map_assoc(_ftpgallery_readFolders( variable_get('ftpgallery_gallerybasedir', 'files') )),
    '#default_value' => isset($node->galleryurl) ? $node->galleryurl : 0,
    '#weight' => -1,
  );

  $form['thumbid'] = array(
    '#type' => 'textfield',
    '#title' => t('Thumbnail prefix or Path'),
    '#required' => TRUE,
    '#default_value' => isset($node->thumbid) ? $node->thumbid : 'thumb_',
    '#weight' => 0,
  );

  $content = empty($node->galleryurl) ? 'Preview Area' :
             _ftpgallery_galleryContentPreviewBilder($node->galleryurl);

  $form['galleryContent'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="dynamic-Content">',
    '#suffix' => '</div>',
    '#value' => $content,
    '#weight' => 0,
  );

  return $form;
}

// --- Display ---
function ftpgallery_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node = _ftpgallery_getGalleryPictures($node);

  $node->content['gallery'] = array(
    '#value' => theme('ftpgallery_gallery', $node),
    '#weight' => 1,
  );

  $errors = drupal_get_messages( 'error', FALSE );
  if( !empty($errors) && $page ){
    _ftpgallery_debug($node);
  }

  return $node;
}

function _ftpgallery_getGalleryPictures($node){
  if( !_ftpgallery_galleryPathExists($node) ){
     drupal_set_message(t('Gallery path does not exist.'), 'error');
     return $node;
  }

  // here we get the Pictures. See ftpgallery.parser.inc for the parsing.
  $node = _ftpgallery_parseGalleryFolder($node);

  if( count($node->gallery['thumbnails']) != count($node->gallery['pictures']) ){
    drupal_set_message(t('Not equal number of thumbnails and pictures.'), 'warning');
  }

  if( count($node->gallery['thumbnails']) == 0 ){
    drupal_set_message(t('No Pictures or no matching thumbnails in the Folder.'), 'error');
  }

  return $node;
}

function _ftpgallery_galleryPathExists($node, $file = ''){
  if( empty($node->galleryurl) ){
    return false;
  }
  return file_exists( getcwd() . "/" . _ftpgallery_galleryPath($node) . $file );
}

/// return the current gallery paht for the node.
function _ftpgallery_galleryPath($node){
  $baseDir = variable_get('ftpgallery_gallerybasedir', 'files');
  return $baseDir . "/" . $node->galleryurl . "/";
}

// Tell Drupal about the theme functions
function ftpgallery_theme() {
  return array(
    'ftpgallery_gallery' => array(
      'arguments' => array('node'),
    ),
    'ftpgallery_formatLightboxImage' => array(
      'arguments' => array('pictureUrl', 'thumbnailUrl', 'lightboxGroup', 'alt', 'title' , 'attributes'),
    ),
  );
}

/// The theme function for showing the gallery.
function theme_ftpgallery_gallery($node) {
  $output = '<div class="ftpgallery_gallery">';
  $galleryPath = _ftpgallery_galleryPath($node);

  // we have the same amount of thumbnails and pictures. see parser.
  for ($i = 0; $i < count($node->gallery['thumbnails']); $i++) {
    $output .= theme_ftpgallery_formatLightboxImage(
      $galleryPath . $node->gallery['pictures'][$i],
      $galleryPath . $node->gallery['thumbnails'][$i],
      $node->nid,
      $node->gallery['thumbnails'][$i]
    );
  }
  $output .= '</div>';
  return $output;
}

/// Returns a themed thumnail image with the link on the original image.
/// Also includes attributes used by the lightbox script.
function theme_ftpgallery_formatLightboxImage($pictureUrl, $thumbnailUrl, $lightboxGroup, $alt='', $title='' , $attributes = NULL){
    $output .= '<a href="' . $pictureUrl . '" ';

    $output .= 'rel="lightbox[';
    $output .= $lightboxGroup;
    $output .= ']"> ';

    $attributes['class'] = 'lightboxThumbnail';

    $output .=  theme('image', $thumbnailUrl, $alt, $title, $attributes, FALSE);

    $output .= '</a>';
    return $output;
}


/// Add some debug information, when somthing goes wrong.
function _ftpgallery_debug($node) {
  drupal_set_message(t(" *** Debug info *** "), 'error');

  drupal_set_message(t("Thumbnail prefix: %thumb",
                     array('%thumb' => $node->thumbid)), 'error');

  drupal_set_message(t("Allowed file types: %types",
                     array('%types' =>  variable_get('ftpgallery_allowedfiletypes', 'jpg jpeg png'))), 'error');

  drupal_set_message(t("Gallery path: %path",
                     array('%path' =>  _ftpgallery_galleryPath($node))), 'error');
}